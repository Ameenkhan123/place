 <div class="panel panel-info">
 	<div class="panel-heading" >

 	</div>
 	<div class="panel-body">
 		<div class="well img-responsive">
 			<%= form_with model: @location, local: true do |form| %>
 			<table class="table-responsive">
 				<div class="form-group">
 					<p>
 						<%=form.label :name, :class => 'control-label col-lg-2' %><br>

 						<%= form.text_field :name, :class => 'form-control' %>
 					</p>

            <p>
            <%=form.label :description, :class => 'control-label col-lg-2' %><br>

    <%= form.text_area :description, :class =>"form-control ckeditor" %>
        <%=form.error_span(:description) %>

          </p>
          <p>

            <%= form.label :address, :class => 'control-label col-lg-2' %>
            <%= form.text_field :address, :class => "form-control", id: "autocomplete", placeholder: "Enter your address", 
             onFocus: "geolocate()"  %>
             <%= form.hidden_field :latitude %>
             <%= form.hidden_field :longitude %>
          </p>
 					<p>
 						<div class="col-md-5" style="margin-left: 25%">
 							<%= form.submit 'submit', :class => 'btn btn-success btn btn-block'  %>
 						</div>
 					</p>
 					<br>
 					<br>
 					<div class="col-md-5" style="margin-left: %">
 						<%= link_to 'Back', locations_path, :class => 'btn btn-info ' %>
 					</div>

 				</div>
 			</table>

 			<% end %>

 		</div>
 	</div>
 </div>
<script>

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAN1Y9tstSw1JLgZUHbdL5qL6mRJiY8brw&libraries=places&callback=initAutocomplete"
        async defer></script>


<script >
  $(document).ready(function(){
    $("ckeditor").ckeditor({

    });
  });
</script>
